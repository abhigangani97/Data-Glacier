{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2295510d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#importing os and time library\n",
    "import os\n",
    "import time\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ee5c901e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: pyyaml in /Users/abhimanyu/opt/anaconda3/lib/python3.9/site-packages (6.0)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install pyyaml"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "99052b93",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.559553300961852"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Size of the file in GB\n",
    "size = os.path.getsize('dataset.csv')\n",
    "size = size/(1024*1024*1024)\n",
    "size"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bff39c01",
   "metadata": {},
   "source": [
    "### Read data with Dask"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9c2225dc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The time taken by dask in reading in sample file is 0.021778345108032227 seconds\n"
     ]
    }
   ],
   "source": [
    "from dask import dataframe as dd\n",
    "start_time = time.time()\n",
    "dask_df = dd.read_csv('dataset.csv')\n",
    "end_time = time.time()\n",
    "print(f'The time taken by dask in reading in sample file is {end_time-start_time} seconds')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "63b25aaf",
   "metadata": {},
   "source": [
    "### Read data with pandas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "b61976df",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The time taken by pandas in reading in sample file is 76.17695212364197 seconds\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "start_time = time.time()\n",
    "df = pd.read_csv('dataset.csv')\n",
    "end_time = time.time()\n",
    "print(f'The time taken by pandas in reading in sample file is {end_time-start_time} seconds')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7897481c",
   "metadata": {},
   "source": [
    "### Read data with modin and ray"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "cadf365e",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2022-12-06 18:18:15,341\tINFO worker.py:1528 -- Started a local Ray instance.\n",
      "UserWarning: When using a pre-initialized Ray cluster, please ensure that the runtime env sets environment variable __MODIN_AUTOIMPORT_PANDAS__ to 1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The time taken by ray in reading in sample file is 95.67459511756897 seconds\n"
     ]
    }
   ],
   "source": [
    "import modin.pandas as pd\n",
    "import ray\n",
    "ray.shutdown()\n",
    "ray.init()\n",
    "start_time = time.time()\n",
    "df = pd.read_csv('dataset.csv')\n",
    "end_time = time.time()\n",
    "print(f'The time taken by ray in reading in sample file is {end_time-start_time} seconds')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71a9a3a7",
   "metadata": {},
   "source": [
    "### Using Dask as it is the fastest in pandas,dask and modin & ray"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "98e6a445",
   "metadata": {},
   "outputs": [],
   "source": [
    "from dask import dataframe as dd\n",
    "df = dd.read_csv('dataset.csv',delimiter=',')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "44987095",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'dask.dataframe.core.DataFrame'>\n",
      "Columns: 8 entries, Year_month to Value Yen\n",
      "dtypes: int64(8)"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "FutureWarning: iteritems is deprecated and will be removed in a future version. Use .items instead.\n"
     ]
    }
   ],
   "source": [
    "#Checking info\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c746afff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "70610541"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Checking total entries\n",
    "len(df.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "681e93bd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#checking number of columns\n",
    "len(df.columns)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a1f4ae33",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/31/xq_cv4t950vgtx845ykjgdc80000gn/T/ipykernel_33562/1774555199.py:1: FutureWarning: The default value of regex will change from True to False in a future version.\n",
      "  df.columns=df.columns.str.replace('[#,@,&]','')\n"
     ]
    }
   ],
   "source": [
    "#removing special characters in the column\n",
    "df.columns=df.columns.str.replace('[#,@,&]','')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "12fd3473",
   "metadata": {},
   "outputs": [],
   "source": [
    "#removing white spaces from dataset\n",
    "df.columns = df.columns.str.replace(' ', '')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c397894b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Year_month', 'exp_imp', 'hs9', 'Customs', 'Country', 'q1', 'q2',\n",
       "       'ValueYen'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data=df.columns\n",
    "data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a4a8c0b",
   "metadata": {},
   "source": [
    "## Validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "1c2b32d7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Overwriting utility.py\n"
     ]
    }
   ],
   "source": [
    "%%writefile utility.py\n",
    "import logging\n",
    "import os\n",
    "import subprocess\n",
    "import yaml\n",
    "import pandas as pd\n",
    "import datetime \n",
    "import gc\n",
    "import re\n",
    "\n",
    "\n",
    "################\n",
    "# File Reading #\n",
    "################\n",
    "\n",
    "def read_config_file(filepath):\n",
    "    with open(filepath, 'r') as stream:\n",
    "        try:\n",
    "            return yaml.load(stream, Loader=yaml.FullLoader)\n",
    "        except yaml.YAMLError as exc:\n",
    "            logging.error(exc)\n",
    "\n",
    "\n",
    "def replacer(string, char):\n",
    "    pattern = char + '{2,}'\n",
    "    string = re.sub(pattern, char, string) \n",
    "    return string\n",
    "\n",
    "def col_header_val(df,table_config):\n",
    "    '''\n",
    "    replace whitespaces in the column\n",
    "    and standardized column names\n",
    "    '''\n",
    "    df.columns = df.columns.str.lower()\n",
    "    df.columns = df.columns.str.replace('[^\\w]','_',regex=True)\n",
    "    df.columns = list(map(lambda x: x.strip('_'), list(df.columns)))\n",
    "    df.columns = list(map(lambda x: replacer(x,'_'), list(df.columns)))\n",
    "    expected_col = list(map(lambda x: x.lower(),  table_config['columns']))\n",
    "    expected_col.sort()\n",
    "    df.columns =list(map(lambda x: x.lower(), list(df.columns)))\n",
    "    df = df.reindex(sorted(df.columns), axis=1)\n",
    "    if len(df.columns) == len(expected_col) and list(expected_col)  == list(df.columns):\n",
    "        print(\"column name and column length validation passed\")\n",
    "        return 1\n",
    "    else:\n",
    "        print(\"column name and column length validation failed\")\n",
    "        mismatched_columns_file = list(set(df.columns).difference(expected_col))\n",
    "        print(\"Following File columns are not in the YAML file\",mismatched_columns_file)\n",
    "        missing_YAML_file = list(set(expected_col).difference(df.columns))\n",
    "        print(\"Following YAML columns are not in the file uploaded\",missing_YAML_file)\n",
    "        logging.info(f'df columns: {df.columns}')\n",
    "        logging.info(f'expected columns: {expected_col}')\n",
    "        return 0"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a01aaa8",
   "metadata": {},
   "source": [
    "### Writing YAML File"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f06f7dc6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Overwriting store.yaml\n"
     ]
    }
   ],
   "source": [
    "%%writefile store.yaml\n",
    "file_type: csv\n",
    "dataset_name: file\n",
    "file_name: dataset\n",
    "table_name: table\n",
    "inbound_delimiter: \",\"\n",
    "outbound_delimiter: \"|\"\n",
    "skip_leading_rows: 1\n",
    "columns: \n",
    "    - Year_month\n",
    "    - exp_month\n",
    "    - hs9\n",
    "    - Customs\n",
    "    - Country\n",
    "    - q1\n",
    "    - q2\n",
    "    - ValueYen"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "5fb9cfd8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Reading config file using utility created above\n",
    "import utility as util\n",
    "config_data = util.read_config_file(\"store.yaml\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "f1432022",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'file_type': 'csv',\n",
       " 'dataset_name': 'file',\n",
       " 'file_name': 'dataset',\n",
       " 'table_name': 'table',\n",
       " 'inbound_delimiter': ',',\n",
       " 'outbound_delimiter': '|',\n",
       " 'skip_leading_rows': 1,\n",
       " 'columns': ['Year_month',\n",
       "  'exp_month',\n",
       "  'hs9',\n",
       "  'Customs',\n",
       "  'Country',\n",
       "  'q1',\n",
       "  'q2',\n",
       "  'ValueYen']}"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "config_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "40e2d0e8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year_month</th>\n",
       "      <th>exp_imp</th>\n",
       "      <th>hs@9</th>\n",
       "      <th>Cust oms</th>\n",
       "      <th>@Country</th>\n",
       "      <th>q@1</th>\n",
       "      <th>q@2</th>\n",
       "      <th>Value Yen</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>198801</td>\n",
       "      <td>1</td>\n",
       "      <td>103</td>\n",
       "      <td>100</td>\n",
       "      <td>120991000</td>\n",
       "      <td>0</td>\n",
       "      <td>1590</td>\n",
       "      <td>4154</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>198801</td>\n",
       "      <td>1</td>\n",
       "      <td>103</td>\n",
       "      <td>100</td>\n",
       "      <td>210390900</td>\n",
       "      <td>0</td>\n",
       "      <td>4500</td>\n",
       "      <td>2565</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>198801</td>\n",
       "      <td>1</td>\n",
       "      <td>103</td>\n",
       "      <td>100</td>\n",
       "      <td>220890200</td>\n",
       "      <td>0</td>\n",
       "      <td>3000</td>\n",
       "      <td>757</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>198801</td>\n",
       "      <td>1</td>\n",
       "      <td>103</td>\n",
       "      <td>100</td>\n",
       "      <td>240220000</td>\n",
       "      <td>0</td>\n",
       "      <td>26000</td>\n",
       "      <td>40668</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>198801</td>\n",
       "      <td>1</td>\n",
       "      <td>103</td>\n",
       "      <td>100</td>\n",
       "      <td>250410000</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>8070</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Year_month  exp_imp  hs@9  Cust oms   @Country  q@1    q@2  Value Yen\n",
       "0      198801        1   103       100  120991000    0   1590       4154\n",
       "1      198801        1   103       100  210390900    0   4500       2565\n",
       "2      198801        1   103       100  220890200    0   3000        757\n",
       "3      198801        1   103       100  240220000    0  26000      40668\n",
       "4      198801        1   103       100  250410000    0      5       8070"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Reading the file using Dask again\n",
    "from dask import dataframe as dd\n",
    "df_sample = dd.read_csv('dataset.csv',delimiter=',')\n",
    "df_sample.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "1638cb2e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Reading the file using config file\n",
    "file_type = config_data['file_type']\n",
    "source_file = config_data['file_name'] + f'.{file_type}'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "16b0cc7a",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/31/xq_cv4t950vgtx845ykjgdc80000gn/T/ipykernel_33562/2937139907.py:2: FutureWarning: In a future version of pandas all arguments of read_csv except for the argument 'filepath_or_buffer' will be keyword-only.\n",
      "  df = pd.read_csv(source_file,config_data['inbound_delimiter'])\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year_month</th>\n",
       "      <th>exp_imp</th>\n",
       "      <th>hs@9</th>\n",
       "      <th>Cust oms</th>\n",
       "      <th>@Country</th>\n",
       "      <th>q@1</th>\n",
       "      <th>q@2</th>\n",
       "      <th>Value Yen</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>198801</td>\n",
       "      <td>1</td>\n",
       "      <td>103</td>\n",
       "      <td>100</td>\n",
       "      <td>120991000</td>\n",
       "      <td>0</td>\n",
       "      <td>1590</td>\n",
       "      <td>4154</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>198801</td>\n",
       "      <td>1</td>\n",
       "      <td>103</td>\n",
       "      <td>100</td>\n",
       "      <td>210390900</td>\n",
       "      <td>0</td>\n",
       "      <td>4500</td>\n",
       "      <td>2565</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>198801</td>\n",
       "      <td>1</td>\n",
       "      <td>103</td>\n",
       "      <td>100</td>\n",
       "      <td>220890200</td>\n",
       "      <td>0</td>\n",
       "      <td>3000</td>\n",
       "      <td>757</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>198801</td>\n",
       "      <td>1</td>\n",
       "      <td>103</td>\n",
       "      <td>100</td>\n",
       "      <td>240220000</td>\n",
       "      <td>0</td>\n",
       "      <td>26000</td>\n",
       "      <td>40668</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>198801</td>\n",
       "      <td>1</td>\n",
       "      <td>103</td>\n",
       "      <td>100</td>\n",
       "      <td>250410000</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>8070</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Year_month  exp_imp  hs@9  Cust oms   @Country  q@1    q@2  Value Yen\n",
       "0      198801        1   103       100  120991000    0   1590       4154\n",
       "1      198801        1   103       100  210390900    0   4500       2565\n",
       "2      198801        1   103       100  220890200    0   3000        757\n",
       "3      198801        1   103       100  240220000    0  26000      40668\n",
       "4      198801        1   103       100  250410000    0      5       8070"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#reading the file using pandas\n",
    "import pandas as pd\n",
    "df = pd.read_csv(source_file,config_data['inbound_delimiter'])\n",
    "df.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "524f6eb2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "column name and column length validation failed\n",
      "Following File columns are not in the YAML file ['q_1', 'exp_imp', 'value_yen', 'cust_oms', 'q_2', 'hs_9']\n",
      "Following YAML columns are not in the file uploaded ['hs9', 'exp_month', 'q2', 'q1', 'customs', 'valueyen']\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#validating the header of the file using function created in utility\n",
    "util.col_header_val(df,config_data)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "fe30fab8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "columns of files are: Index(['year_month', 'exp_imp', 'hs_9', 'cust_oms', 'country', 'q_1', 'q_2',\n",
      "       'value_yen'],\n",
      "      dtype='object')\n",
      "columns of YAML are: ['Year_month', 'exp_month', 'hs9', 'Customs', 'Country', 'q1', 'q2', 'ValueYen']\n"
     ]
    }
   ],
   "source": [
    "#checking column names in dataframe and in YAML\n",
    "print(\"columns of files are:\" ,df.columns)\n",
    "print(\"columns of YAML are:\" ,config_data['columns'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "397a7f13",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "column name and column length validation failed\n",
      "Following File columns are not in the YAML file ['q_1', 'exp_imp', 'value_yen', 'cust_oms', 'q_2', 'hs_9']\n",
      "Following YAML columns are not in the file uploaded ['hs9', 'exp_month', 'q2', 'q1', 'customs', 'valueyen']\n",
      "validation failed\n"
     ]
    }
   ],
   "source": [
    "#Validation\n",
    "if util.col_header_val(df,config_data)==0:\n",
    "    print(\"validation failed\")\n",
    "else:\n",
    "    print(\"col validation passed\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a7c9dc8a",
   "metadata": {},
   "source": [
    "### Writing file in gz formatm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "264fd30a",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/abhimanyu/opt/anaconda3/lib/python3.9/site-packages/dask/dataframe/io/csv.py:748: FutureWarning: the 'line_terminator'' keyword is deprecated, use 'lineterminator' instead.\n",
      "  df.to_csv(f, **kwargs)\n",
      "/Users/abhimanyu/opt/anaconda3/lib/python3.9/site-packages/dask/dataframe/io/csv.py:748: FutureWarning: the 'line_terminator'' keyword is deprecated, use 'lineterminator' instead.\n",
      "  df.to_csv(f, **kwargs)\n",
      "/Users/abhimanyu/opt/anaconda3/lib/python3.9/site-packages/dask/dataframe/io/csv.py:748: FutureWarning: the 'line_terminator'' keyword is deprecated, use 'lineterminator' instead.\n",
      "  df.to_csv(f, **kwargs)\n",
      "/Users/abhimanyu/opt/anaconda3/lib/python3.9/site-packages/dask/dataframe/io/csv.py:748: FutureWarning: the 'line_terminator'' keyword is deprecated, use 'lineterminator' instead.\n",
      "  df.to_csv(f, **kwargs)\n",
      "/Users/abhimanyu/opt/anaconda3/lib/python3.9/site-packages/dask/dataframe/io/csv.py:748: FutureWarning: the 'line_terminator'' keyword is deprecated, use 'lineterminator' instead.\n",
      "  df.to_csv(f, **kwargs)\n",
      "/Users/abhimanyu/opt/anaconda3/lib/python3.9/site-packages/dask/dataframe/io/csv.py:748: FutureWarning: the 'line_terminator'' keyword is deprecated, use 'lineterminator' instead.\n",
      "  df.to_csv(f, **kwargs)\n",
      "/Users/abhimanyu/opt/anaconda3/lib/python3.9/site-packages/dask/dataframe/io/csv.py:748: FutureWarning: the 'line_terminator'' keyword is deprecated, use 'lineterminator' instead.\n",
      "  df.to_csv(f, **kwargs)\n",
      "/Users/abhimanyu/opt/anaconda3/lib/python3.9/site-packages/dask/dataframe/io/csv.py:748: FutureWarning: the 'line_terminator'' keyword is deprecated, use 'lineterminator' instead.\n",
      "  df.to_csv(f, **kwargs)\n",
      "/Users/abhimanyu/opt/anaconda3/lib/python3.9/site-packages/dask/dataframe/io/csv.py:748: FutureWarning: the 'line_terminator'' keyword is deprecated, use 'lineterminator' instead.\n",
      "  df.to_csv(f, **kwargs)\n",
      "/Users/abhimanyu/opt/anaconda3/lib/python3.9/site-packages/dask/dataframe/io/csv.py:748: FutureWarning: the 'line_terminator'' keyword is deprecated, use 'lineterminator' instead.\n",
      "  df.to_csv(f, **kwargs)\n",
      "/Users/abhimanyu/opt/anaconda3/lib/python3.9/site-packages/dask/dataframe/io/csv.py:748: FutureWarning: the 'line_terminator'' keyword is deprecated, use 'lineterminator' instead.\n",
      "  df.to_csv(f, **kwargs)\n",
      "/Users/abhimanyu/opt/anaconda3/lib/python3.9/site-packages/dask/dataframe/io/csv.py:748: FutureWarning: the 'line_terminator'' keyword is deprecated, use 'lineterminator' instead.\n",
      "  df.to_csv(f, **kwargs)\n",
      "/Users/abhimanyu/opt/anaconda3/lib/python3.9/site-packages/dask/dataframe/io/csv.py:748: FutureWarning: the 'line_terminator'' keyword is deprecated, use 'lineterminator' instead.\n",
      "  df.to_csv(f, **kwargs)\n",
      "/Users/abhimanyu/opt/anaconda3/lib/python3.9/site-packages/dask/dataframe/io/csv.py:748: FutureWarning: the 'line_terminator'' keyword is deprecated, use 'lineterminator' instead.\n",
      "  df.to_csv(f, **kwargs)\n",
      "/Users/abhimanyu/opt/anaconda3/lib/python3.9/site-packages/dask/dataframe/io/csv.py:748: FutureWarning: the 'line_terminator'' keyword is deprecated, use 'lineterminator' instead.\n",
      "  df.to_csv(f, **kwargs)\n",
      "/Users/abhimanyu/opt/anaconda3/lib/python3.9/site-packages/dask/dataframe/io/csv.py:748: FutureWarning: the 'line_terminator'' keyword is deprecated, use 'lineterminator' instead.\n",
      "  df.to_csv(f, **kwargs)\n",
      "/Users/abhimanyu/opt/anaconda3/lib/python3.9/site-packages/dask/dataframe/io/csv.py:748: FutureWarning: the 'line_terminator'' keyword is deprecated, use 'lineterminator' instead.\n",
      "  df.to_csv(f, **kwargs)\n",
      "/Users/abhimanyu/opt/anaconda3/lib/python3.9/site-packages/dask/dataframe/io/csv.py:748: FutureWarning: the 'line_terminator'' keyword is deprecated, use 'lineterminator' instead.\n",
      "  df.to_csv(f, **kwargs)\n",
      "/Users/abhimanyu/opt/anaconda3/lib/python3.9/site-packages/dask/dataframe/io/csv.py:748: FutureWarning: the 'line_terminator'' keyword is deprecated, use 'lineterminator' instead.\n",
      "  df.to_csv(f, **kwargs)\n",
      "/Users/abhimanyu/opt/anaconda3/lib/python3.9/site-packages/dask/dataframe/io/csv.py:748: FutureWarning: the 'line_terminator'' keyword is deprecated, use 'lineterminator' instead.\n",
      "  df.to_csv(f, **kwargs)\n",
      "/Users/abhimanyu/opt/anaconda3/lib/python3.9/site-packages/dask/dataframe/io/csv.py:748: FutureWarning: the 'line_terminator'' keyword is deprecated, use 'lineterminator' instead.\n",
      "  df.to_csv(f, **kwargs)\n",
      "/Users/abhimanyu/opt/anaconda3/lib/python3.9/site-packages/dask/dataframe/io/csv.py:748: FutureWarning: the 'line_terminator'' keyword is deprecated, use 'lineterminator' instead.\n",
      "  df.to_csv(f, **kwargs)\n",
      "/Users/abhimanyu/opt/anaconda3/lib/python3.9/site-packages/dask/dataframe/io/csv.py:748: FutureWarning: the 'line_terminator'' keyword is deprecated, use 'lineterminator' instead.\n",
      "  df.to_csv(f, **kwargs)\n",
      "/Users/abhimanyu/opt/anaconda3/lib/python3.9/site-packages/dask/dataframe/io/csv.py:748: FutureWarning: the 'line_terminator'' keyword is deprecated, use 'lineterminator' instead.\n",
      "  df.to_csv(f, **kwargs)\n",
      "/Users/abhimanyu/opt/anaconda3/lib/python3.9/site-packages/dask/dataframe/io/csv.py:748: FutureWarning: the 'line_terminator'' keyword is deprecated, use 'lineterminator' instead.\n",
      "  df.to_csv(f, **kwargs)\n",
      "/Users/abhimanyu/opt/anaconda3/lib/python3.9/site-packages/dask/dataframe/io/csv.py:748: FutureWarning: the 'line_terminator'' keyword is deprecated, use 'lineterminator' instead.\n",
      "  df.to_csv(f, **kwargs)\n",
      "/Users/abhimanyu/opt/anaconda3/lib/python3.9/site-packages/dask/dataframe/io/csv.py:748: FutureWarning: the 'line_terminator'' keyword is deprecated, use 'lineterminator' instead.\n",
      "  df.to_csv(f, **kwargs)\n",
      "/Users/abhimanyu/opt/anaconda3/lib/python3.9/site-packages/dask/dataframe/io/csv.py:748: FutureWarning: the 'line_terminator'' keyword is deprecated, use 'lineterminator' instead.\n",
      "  df.to_csv(f, **kwargs)\n",
      "/Users/abhimanyu/opt/anaconda3/lib/python3.9/site-packages/dask/dataframe/io/csv.py:748: FutureWarning: the 'line_terminator'' keyword is deprecated, use 'lineterminator' instead.\n",
      "  df.to_csv(f, **kwargs)\n",
      "/Users/abhimanyu/opt/anaconda3/lib/python3.9/site-packages/dask/dataframe/io/csv.py:748: FutureWarning: the 'line_terminator'' keyword is deprecated, use 'lineterminator' instead.\n",
      "  df.to_csv(f, **kwargs)\n",
      "/Users/abhimanyu/opt/anaconda3/lib/python3.9/site-packages/dask/dataframe/io/csv.py:748: FutureWarning: the 'line_terminator'' keyword is deprecated, use 'lineterminator' instead.\n",
      "  df.to_csv(f, **kwargs)\n",
      "/Users/abhimanyu/opt/anaconda3/lib/python3.9/site-packages/dask/dataframe/io/csv.py:748: FutureWarning: the 'line_terminator'' keyword is deprecated, use 'lineterminator' instead.\n",
      "  df.to_csv(f, **kwargs)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "['/Users/abhimanyu/Desktop/Glacier/Week6/dataset.csv.gz/00.part',\n",
       " '/Users/abhimanyu/Desktop/Glacier/Week6/dataset.csv.gz/01.part',\n",
       " '/Users/abhimanyu/Desktop/Glacier/Week6/dataset.csv.gz/02.part',\n",
       " '/Users/abhimanyu/Desktop/Glacier/Week6/dataset.csv.gz/03.part',\n",
       " '/Users/abhimanyu/Desktop/Glacier/Week6/dataset.csv.gz/04.part',\n",
       " '/Users/abhimanyu/Desktop/Glacier/Week6/dataset.csv.gz/05.part',\n",
       " '/Users/abhimanyu/Desktop/Glacier/Week6/dataset.csv.gz/06.part',\n",
       " '/Users/abhimanyu/Desktop/Glacier/Week6/dataset.csv.gz/07.part',\n",
       " '/Users/abhimanyu/Desktop/Glacier/Week6/dataset.csv.gz/08.part',\n",
       " '/Users/abhimanyu/Desktop/Glacier/Week6/dataset.csv.gz/09.part',\n",
       " '/Users/abhimanyu/Desktop/Glacier/Week6/dataset.csv.gz/10.part',\n",
       " '/Users/abhimanyu/Desktop/Glacier/Week6/dataset.csv.gz/11.part',\n",
       " '/Users/abhimanyu/Desktop/Glacier/Week6/dataset.csv.gz/12.part',\n",
       " '/Users/abhimanyu/Desktop/Glacier/Week6/dataset.csv.gz/13.part',\n",
       " '/Users/abhimanyu/Desktop/Glacier/Week6/dataset.csv.gz/14.part',\n",
       " '/Users/abhimanyu/Desktop/Glacier/Week6/dataset.csv.gz/15.part',\n",
       " '/Users/abhimanyu/Desktop/Glacier/Week6/dataset.csv.gz/16.part',\n",
       " '/Users/abhimanyu/Desktop/Glacier/Week6/dataset.csv.gz/17.part',\n",
       " '/Users/abhimanyu/Desktop/Glacier/Week6/dataset.csv.gz/18.part',\n",
       " '/Users/abhimanyu/Desktop/Glacier/Week6/dataset.csv.gz/19.part',\n",
       " '/Users/abhimanyu/Desktop/Glacier/Week6/dataset.csv.gz/20.part',\n",
       " '/Users/abhimanyu/Desktop/Glacier/Week6/dataset.csv.gz/21.part',\n",
       " '/Users/abhimanyu/Desktop/Glacier/Week6/dataset.csv.gz/22.part',\n",
       " '/Users/abhimanyu/Desktop/Glacier/Week6/dataset.csv.gz/23.part',\n",
       " '/Users/abhimanyu/Desktop/Glacier/Week6/dataset.csv.gz/24.part',\n",
       " '/Users/abhimanyu/Desktop/Glacier/Week6/dataset.csv.gz/25.part',\n",
       " '/Users/abhimanyu/Desktop/Glacier/Week6/dataset.csv.gz/26.part',\n",
       " '/Users/abhimanyu/Desktop/Glacier/Week6/dataset.csv.gz/27.part',\n",
       " '/Users/abhimanyu/Desktop/Glacier/Week6/dataset.csv.gz/28.part',\n",
       " '/Users/abhimanyu/Desktop/Glacier/Week6/dataset.csv.gz/29.part',\n",
       " '/Users/abhimanyu/Desktop/Glacier/Week6/dataset.csv.gz/30.part',\n",
       " '/Users/abhimanyu/Desktop/Glacier/Week6/dataset.csv.gz/31.part',\n",
       " '/Users/abhimanyu/Desktop/Glacier/Week6/dataset.csv.gz/32.part',\n",
       " '/Users/abhimanyu/Desktop/Glacier/Week6/dataset.csv.gz/33.part',\n",
       " '/Users/abhimanyu/Desktop/Glacier/Week6/dataset.csv.gz/34.part',\n",
       " '/Users/abhimanyu/Desktop/Glacier/Week6/dataset.csv.gz/35.part',\n",
       " '/Users/abhimanyu/Desktop/Glacier/Week6/dataset.csv.gz/36.part',\n",
       " '/Users/abhimanyu/Desktop/Glacier/Week6/dataset.csv.gz/37.part',\n",
       " '/Users/abhimanyu/Desktop/Glacier/Week6/dataset.csv.gz/38.part',\n",
       " '/Users/abhimanyu/Desktop/Glacier/Week6/dataset.csv.gz/39.part',\n",
       " '/Users/abhimanyu/Desktop/Glacier/Week6/dataset.csv.gz/40.part',\n",
       " '/Users/abhimanyu/Desktop/Glacier/Week6/dataset.csv.gz/41.part',\n",
       " '/Users/abhimanyu/Desktop/Glacier/Week6/dataset.csv.gz/42.part']"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import datetime\n",
    "import csv\n",
    "import gzip\n",
    "\n",
    "from dask import dataframe as dd\n",
    "df = dd.read_csv('dataset.csv',delimiter=',')\n",
    "\n",
    "# Write csv in gz format in pipe separated text file (|)\n",
    "df.to_csv('dataset.csv.gz',\n",
    "          sep='|',\n",
    "          header=True,\n",
    "          index=False,\n",
    "          quoting=csv.QUOTE_ALL,\n",
    "          compression='gzip',\n",
    "          quotechar='\"',\n",
    "          doublequote=True,\n",
    "          line_terminator='\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "16d6683d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "26.part\n",
      "30.part\n",
      "10.part\n",
      "06.part\n",
      "07.part\n",
      "11.part\n",
      "31.part\n",
      "27.part\n",
      "41.part\n",
      "16.part\n",
      "00.part\n",
      "20.part\n",
      "36.part\n",
      "37.part\n",
      "21.part\n",
      "01.part\n",
      "17.part\n",
      "40.part\n",
      "02.part\n",
      "14.part\n",
      "38.part\n",
      "18.part\n",
      "34.part\n",
      "22.part\n",
      "23.part\n",
      "35.part\n",
      "19.part\n",
      "39.part\n",
      "42.part\n",
      "15.part\n",
      "03.part\n",
      "08.part\n",
      "32.part\n",
      "24.part\n",
      "04.part\n",
      "12.part\n",
      "28.part\n",
      "29.part\n",
      "13.part\n",
      "05.part\n",
      "25.part\n",
      "33.part\n",
      "09.part\n"
     ]
    }
   ],
   "source": [
    "#number of files in gz format folder\n",
    "import os\n",
    "parts = os.listdir('dataset.csv.gz/')\n",
    "for part in parts:\n",
    "    print(part)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "9f0e7785",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1440"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#size of the gz file\n",
    "os.path.getsize('dataset.csv.gz')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "080f26c0",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ebf29ac8",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
