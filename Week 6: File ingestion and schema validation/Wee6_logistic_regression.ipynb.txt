{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "machine_shape": "hm",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/AbhimanyuGangani/AbhimanyuGangani-FIle-ingestion-and-Schema-Validation/blob/main/Wee6_logistic_regression.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0MRC0e0KhQ0S"
      },
      "source": [
        "# Logistic Regression"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LWd1UlMnhT2s"
      },
      "source": [
        "## Importing the libraries"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ],
      "metadata": {
        "id": "--OCjIbKvvZr"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "K1VMqkGvhc3-"
      },
      "source": [
        "## Importing the dataset"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df =  pd.read_csv('Social_Network_Ads.csv')\n",
        "df.head()\n",
        "X = df.iloc[:,:-1].values\n",
        "y = df.iloc[:,-1].values\n",
        "print(X.shape)\n",
        "print(y.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aIHOH39Fv9e4",
        "outputId": "22e6454f-4fdd-4fac-a4c2-bcc085bc7079"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(400, 2)\n",
            "(400,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YvxIPVyMhmKp"
      },
      "source": [
        "## Splitting the dataset into the Training set and Test set"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "X_train, X_test, y_train, y_test = train_test_split(X,y, random_state=42, test_size=0.2)\n",
        "print(X_train.shape)\n",
        "print(y_train.shape)\n",
        "print(X_test.shape)\n",
        "print(y_test.shape)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Iy6gZSqhwQUB",
        "outputId": "fe9a21c6-6788-4649-af9f-18a3687d36e3"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(320, 2)\n",
            "(320,)\n",
            "(80, 2)\n",
            "(80,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kW3c7UYih0hT"
      },
      "source": [
        "## Feature Scaling"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "syrnD1Op2BSR",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "dcd71931-1568-4efe-84ac-a49bacc792ce"
      },
      "source": [
        "print(X_train)"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[    27  57000]\n",
            " [    46  28000]\n",
            " [    39 134000]\n",
            " [    44  39000]\n",
            " [    57  26000]\n",
            " [    32 120000]\n",
            " [    41  52000]\n",
            " [    48  74000]\n",
            " [    26  86000]\n",
            " [    22  81000]\n",
            " [    49  86000]\n",
            " [    36  54000]\n",
            " [    40  59000]\n",
            " [    41  80000]\n",
            " [    26  16000]\n",
            " [    39  79000]\n",
            " [    59 130000]\n",
            " [    42  64000]\n",
            " [    53 143000]\n",
            " [    34 112000]\n",
            " [    57 122000]\n",
            " [    39  71000]\n",
            " [    47  25000]\n",
            " [    24  19000]\n",
            " [    36  50000]\n",
            " [    32 150000]\n",
            " [    48  29000]\n",
            " [    30 107000]\n",
            " [    60  34000]\n",
            " [    38  61000]\n",
            " [    33  31000]\n",
            " [    39  71000]\n",
            " [    55  39000]\n",
            " [    49  39000]\n",
            " [    43 112000]\n",
            " [    27  20000]\n",
            " [    26  17000]\n",
            " [    37  93000]\n",
            " [    42  54000]\n",
            " [    35  61000]\n",
            " [    29  75000]\n",
            " [    38  80000]\n",
            " [    45  26000]\n",
            " [    54 108000]\n",
            " [    46  23000]\n",
            " [    23  28000]\n",
            " [    37  75000]\n",
            " [    42  65000]\n",
            " [    35  71000]\n",
            " [    51 146000]\n",
            " [    39  96000]\n",
            " [    24  89000]\n",
            " [    58  95000]\n",
            " [    25  22000]\n",
            " [    41  59000]\n",
            " [    28  89000]\n",
            " [    42  80000]\n",
            " [    42 108000]\n",
            " [    46  96000]\n",
            " [    47 113000]\n",
            " [    33  28000]\n",
            " [    19  25000]\n",
            " [    49  89000]\n",
            " [    31  15000]\n",
            " [    30  79000]\n",
            " [    48 141000]\n",
            " [    32 117000]\n",
            " [    37  71000]\n",
            " [    18  86000]\n",
            " [    42  79000]\n",
            " [    27  84000]\n",
            " [    40  65000]\n",
            " [    57  74000]\n",
            " [    26  15000]\n",
            " [    26  80000]\n",
            " [    29  43000]\n",
            " [    33 149000]\n",
            " [    39  42000]\n",
            " [    54 104000]\n",
            " [    36  33000]\n",
            " [    46  32000]\n",
            " [    40 142000]\n",
            " [    37  62000]\n",
            " [    29 148000]\n",
            " [    37  57000]\n",
            " [    35  50000]\n",
            " [    42  53000]\n",
            " [    35  38000]\n",
            " [    41  30000]\n",
            " [    40  72000]\n",
            " [    26  15000]\n",
            " [    31  68000]\n",
            " [    35  53000]\n",
            " [    35  25000]\n",
            " [    30  89000]\n",
            " [    41  72000]\n",
            " [    28 123000]\n",
            " [    46  82000]\n",
            " [    22  63000]\n",
            " [    45  22000]\n",
            " [    30  49000]\n",
            " [    34  25000]\n",
            " [    40  75000]\n",
            " [    32 117000]\n",
            " [    23  82000]\n",
            " [    26  80000]\n",
            " [    48 131000]\n",
            " [    59 143000]\n",
            " [    35  55000]\n",
            " [    34  43000]\n",
            " [    39  61000]\n",
            " [    27  96000]\n",
            " [    60  83000]\n",
            " [    24  55000]\n",
            " [    58 144000]\n",
            " [    53 104000]\n",
            " [    35  79000]\n",
            " [    36  99000]\n",
            " [    57  60000]\n",
            " [    37 137000]\n",
            " [    33  43000]\n",
            " [    41  71000]\n",
            " [    52  21000]\n",
            " [    52 150000]\n",
            " [    37  70000]\n",
            " [    26  84000]\n",
            " [    26  72000]\n",
            " [    26  52000]\n",
            " [    41  60000]\n",
            " [    31  66000]\n",
            " [    37 144000]\n",
            " [    38  61000]\n",
            " [    31  34000]\n",
            " [    42  75000]\n",
            " [    46 117000]\n",
            " [    36  52000]\n",
            " [    38  71000]\n",
            " [    49  88000]\n",
            " [    57  33000]\n",
            " [    48 138000]\n",
            " [    47  50000]\n",
            " [    33  69000]\n",
            " [    37 146000]\n",
            " [    20  82000]\n",
            " [    40  47000]\n",
            " [    35  22000]\n",
            " [    20  36000]\n",
            " [    45  45000]\n",
            " [    26  43000]\n",
            " [    58 101000]\n",
            " [    40  57000]\n",
            " [    38 112000]\n",
            " [    37  80000]\n",
            " [    49  28000]\n",
            " [    36  75000]\n",
            " [    41  72000]\n",
            " [    35  60000]\n",
            " [    43 129000]\n",
            " [    41  87000]\n",
            " [    38 113000]\n",
            " [    58  23000]\n",
            " [    26  32000]\n",
            " [    32  18000]\n",
            " [    41  52000]\n",
            " [    31  18000]\n",
            " [    35  88000]\n",
            " [    48  35000]\n",
            " [    27  89000]\n",
            " [    35  97000]\n",
            " [    42  73000]\n",
            " [    21  68000]\n",
            " [    41  72000]\n",
            " [    33  60000]\n",
            " [    39 134000]\n",
            " [    28  84000]\n",
            " [    46  88000]\n",
            " [    24  58000]\n",
            " [    31 118000]\n",
            " [    50  88000]\n",
            " [    20  82000]\n",
            " [    32 135000]\n",
            " [    20  86000]\n",
            " [    35  27000]\n",
            " [    29  43000]\n",
            " [    21  88000]\n",
            " [    35  59000]\n",
            " [    45  32000]\n",
            " [    60  42000]\n",
            " [    35  91000]\n",
            " [    35  44000]\n",
            " [    18  44000]\n",
            " [    42 149000]\n",
            " [    45  79000]\n",
            " [    40  60000]\n",
            " [    24  23000]\n",
            " [    33  51000]\n",
            " [    42  70000]\n",
            " [    55 130000]\n",
            " [    50  44000]\n",
            " [    48 119000]\n",
            " [    19  76000]\n",
            " [    41  72000]\n",
            " [    40  71000]\n",
            " [    27  88000]\n",
            " [    36 126000]\n",
            " [    35  75000]\n",
            " [    35  58000]\n",
            " [    34 115000]\n",
            " [    35  73000]\n",
            " [    60 108000]\n",
            " [    25  87000]\n",
            " [    27  54000]\n",
            " [    21  16000]\n",
            " [    37  74000]\n",
            " [    35  39000]\n",
            " [    54  70000]\n",
            " [    47  30000]\n",
            " [    38  50000]\n",
            " [    35 147000]\n",
            " [    35  77000]\n",
            " [    41  79000]\n",
            " [    37  33000]\n",
            " [    60  46000]\n",
            " [    28  59000]\n",
            " [    23  66000]\n",
            " [    23  63000]\n",
            " [    30  17000]\n",
            " [    25  33000]\n",
            " [    59  83000]\n",
            " [    58  38000]\n",
            " [    18  82000]\n",
            " [    46  59000]\n",
            " [    27  17000]\n",
            " [    58  47000]\n",
            " [    48  30000]\n",
            " [    49  65000]\n",
            " [    50  36000]\n",
            " [    53  72000]\n",
            " [    40  57000]\n",
            " [    52 114000]\n",
            " [    59  42000]\n",
            " [    36  63000]\n",
            " [    42 104000]\n",
            " [    37  52000]\n",
            " [    48  33000]\n",
            " [    59  29000]\n",
            " [    37  79000]\n",
            " [    40  61000]\n",
            " [    49  74000]\n",
            " [    25  90000]\n",
            " [    30  15000]\n",
            " [    40  78000]\n",
            " [    24  84000]\n",
            " [    38  50000]\n",
            " [    45 131000]\n",
            " [    21  72000]\n",
            " [    35  23000]\n",
            " [    35  20000]\n",
            " [    31  89000]\n",
            " [    30  80000]\n",
            " [    47  47000]\n",
            " [    27  90000]\n",
            " [    35  72000]\n",
            " [    30 116000]\n",
            " [    39 122000]\n",
            " [    29  83000]\n",
            " [    41  63000]\n",
            " [    48  90000]\n",
            " [    38  59000]\n",
            " [    32  18000]\n",
            " [    39  75000]\n",
            " [    26  81000]\n",
            " [    39 106000]\n",
            " [    22  55000]\n",
            " [    36 118000]\n",
            " [    60  42000]\n",
            " [    28  55000]\n",
            " [    51 134000]\n",
            " [    49  28000]\n",
            " [    36  60000]\n",
            " [    56 104000]\n",
            " [    27  58000]\n",
            " [    24  32000]\n",
            " [    34  72000]\n",
            " [    28  32000]\n",
            " [    50  20000]\n",
            " [    33  41000]\n",
            " [    29  47000]\n",
            " [    22  18000]\n",
            " [    30 135000]\n",
            " [    47 105000]\n",
            " [    46  79000]\n",
            " [    48 134000]\n",
            " [    47  49000]\n",
            " [    49 141000]\n",
            " [    32 100000]\n",
            " [    38  71000]\n",
            " [    19  26000]\n",
            " [    37  77000]\n",
            " [    47  51000]\n",
            " [    40  57000]\n",
            " [    36 125000]\n",
            " [    20  74000]\n",
            " [    31  58000]\n",
            " [    41  45000]\n",
            " [    42  54000]\n",
            " [    28  37000]\n",
            " [    39  73000]\n",
            " [    28  85000]\n",
            " [    38  51000]\n",
            " [    47  43000]\n",
            " [    37  72000]\n",
            " [    49  36000]\n",
            " [    45  22000]\n",
            " [    35  72000]\n",
            " [    24  27000]\n",
            " [    26  35000]\n",
            " [    43 133000]\n",
            " [    39  77000]\n",
            " [    32  86000]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JUd6iBRp2C3L",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "08b16a0f-03d3-402b-a79f-00552ad1e640"
      },
      "source": [
        "print(X_test)"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[    46  22000]\n",
            " [    59  88000]\n",
            " [    28  44000]\n",
            " [    48  96000]\n",
            " [    29  28000]\n",
            " [    30  62000]\n",
            " [    47 107000]\n",
            " [    29  83000]\n",
            " [    40  75000]\n",
            " [    42  65000]\n",
            " [    35  65000]\n",
            " [    53  34000]\n",
            " [    23  48000]\n",
            " [    20  23000]\n",
            " [    30  87000]\n",
            " [    35 108000]\n",
            " [    52  38000]\n",
            " [    46  74000]\n",
            " [    39  42000]\n",
            " [    56  60000]\n",
            " [    22  27000]\n",
            " [    29  80000]\n",
            " [    47  23000]\n",
            " [    59  76000]\n",
            " [    19  19000]\n",
            " [    51  23000]\n",
            " [    42  80000]\n",
            " [    37  53000]\n",
            " [    55 125000]\n",
            " [    19  21000]\n",
            " [    46  41000]\n",
            " [    19  70000]\n",
            " [    36 144000]\n",
            " [    28  79000]\n",
            " [    40 107000]\n",
            " [    35  75000]\n",
            " [    37  55000]\n",
            " [    38  65000]\n",
            " [    26  30000]\n",
            " [    18  68000]\n",
            " [    48  33000]\n",
            " [    24  55000]\n",
            " [    18  52000]\n",
            " [    47  20000]\n",
            " [    20  49000]\n",
            " [    44 139000]\n",
            " [    29  61000]\n",
            " [    31  71000]\n",
            " [    48  41000]\n",
            " [    34  43000]\n",
            " [    25  79000]\n",
            " [    53  82000]\n",
            " [    38  55000]\n",
            " [    25  80000]\n",
            " [    37  80000]\n",
            " [    27  31000]\n",
            " [    60 102000]\n",
            " [    26 118000]\n",
            " [    31  74000]\n",
            " [    31  76000]\n",
            " [    41  51000]\n",
            " [    35  57000]\n",
            " [    52  90000]\n",
            " [    28  87000]\n",
            " [    28  59000]\n",
            " [    27 137000]\n",
            " [    42  90000]\n",
            " [    47 144000]\n",
            " [    39  59000]\n",
            " [    33 113000]\n",
            " [    52 138000]\n",
            " [    19  85000]\n",
            " [    27  58000]\n",
            " [    23  20000]\n",
            " [    47  34000]\n",
            " [    35  50000]\n",
            " [    56 133000]\n",
            " [    54  26000]\n",
            " [    35  47000]\n",
            " [    37  78000]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "sc = StandardScaler()\n",
        "X_train = sc.fit_transform(X_train)\n",
        "X_test = sc.fit_transform(X_test)"
      ],
      "metadata": {
        "id": "-cQ03HZKye5I"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bb6jCOCQiAmP"
      },
      "source": [
        "## Training the Logistic Regression model on the Training set"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "logreg = LogisticRegression(random_state=42)\n",
        "logreg.fit(X_train,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lmK8g-PGxnOB",
        "outputId": "9e6ececf-0dff-4e13-d712-399e34102c08"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression(random_state=42)"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ertthwztyYjo",
        "outputId": "5fabd2e5-437d-4d39-d594-70bde0e7b474"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0,\n",
              "       1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1,\n",
              "       1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0,\n",
              "       0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0,\n",
              "       0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0,\n",
              "       0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0,\n",
              "       0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1,\n",
              "       0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1,\n",
              "       0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1,\n",
              "       0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0,\n",
              "       0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0,\n",
              "       1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n",
              "       1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1,\n",
              "       0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0,\n",
              "       0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0])"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yyxW5b395mR2"
      },
      "source": [
        "## Predicting a new result"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred = logreg.predict(X_test)"
      ],
      "metadata": {
        "id": "SWfvX6qMx5N5"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vKYVQH-l5NpE"
      },
      "source": [
        "## Predicting the Test set results"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(y_pred)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ocHoOHjDzFLB",
        "outputId": "dbabbe76-ed37-485b-f360-fedd6d2e9584"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0 1 0 1 0 0 1 0 0 0 0 1 0 0 0 1 1 1 0 1 0 0 0 1 0 0 1 0 1 0 0 0 1 0 1 0 0\n",
            " 0 0 0 0 0 0 0 0 1 0 0 1 0 0 1 0 0 0 0 1 0 0 0 0 0 1 0 0 0 1 1 0 0 1 0 0 0\n",
            " 0 0 1 1 0 0]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "h4Hwj34ziWQW"
      },
      "source": [
        "## Making the Confusion Matrix"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "confusion_matrix(y_test,y_pred)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "smJJt_ngzHSZ",
        "outputId": "78714055-41a7-4804-8fd3-07eca4e7b57a"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[49,  3],\n",
              "       [ 8, 20]])"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics._plot.confusion_matrix import plot_confusion_matrix\n",
        "plot_confusion_matrix(logreg, X_test, y_test, cmap=plt.cm.Blues)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 354
        },
        "id": "pEyNugD2zX2p",
        "outputId": "9161a28f-17c6-4ab9-e0d5-96d515da83d1"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.8/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function plot_confusion_matrix is deprecated; Function `plot_confusion_matrix` is deprecated in 1.0 and will be removed in 1.2. Use one of the class methods: ConfusionMatrixDisplay.from_predictions or ConfusionMatrixDisplay.from_estimator.\n",
            "  warnings.warn(msg, category=FutureWarning)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7f8c3b78cdc0>"
            ]
          },
          "metadata": {},
          "execution_count": 30
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import accuracy_score\n",
        "accuracy_score(y_test,y_pred)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vyEUZjbM0TlB",
        "outputId": "33e98dbd-c252-41cc-f43f-0965b391e7a5"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.8625"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6OMC_P0diaoD"
      },
      "source": [
        "## Visualising the Training set results"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from matplotlib.colors import ListedColormap\n",
        "X_set, y_set = sc.inverse_transform(X_train), y_train\n",
        "X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min()-10, stop = X_set[:,0].max() + 10, step = 0.25),\n",
        "                     np.arange(start = X_set[:, 1].min()-1000, stop = X_set[:,1].max() + 1000, step = 0.25))\n",
        "plt.contour(X1, X2, logreg.predict(sc.transform(np.array([X1.ravel(), X2.ravel()]).T)).reshape(X1.shape),\n",
        "            alpha = 0.75,cmap = ListedColormap(('red','green')))\n",
        "plt.xlim(X1.min(), X1.max())\n",
        "plt.ylim(X2.min(), X2.max())\n",
        "for i,j in enumerate(np.unique(y_set)):\n",
        "  plt.scatter(X_set[y_set ==  j,0],X_set[y_set == j,1], c = ListedColormap(('red','green'))(i),label=j)\n",
        "plt.title('Logistic Regression (training set)')\n",
        "plt.xlabel('Age')\n",
        "plt.ylabel('Estimated Salary')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 352
        },
        "id": "t1xoEuDb0NnB",
        "outputId": "cd47eecf-cdaa-4825-c5db-6a9da1d6cc2b"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.axes._axes:*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
            "WARNING:matplotlib.axes._axes:*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "np.arange(start = X_set[:, 0].min()-10, stop = X_set[:,0].max() + 10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5tVg3QhB_2AN",
        "outputId": "7e6f04ac-cdd7-4d71-effd-d70427a2e2e7"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 8.,  9., 10., 11., 12., 13., 14., 15., 16., 17., 18., 19., 20.,\n",
              "       21., 22., 23., 24., 25., 26., 27., 28., 29., 30., 31., 32., 33.,\n",
              "       34., 35., 36., 37., 38., 39., 40., 41., 42., 43., 44., 45., 46.,\n",
              "       47., 48., 49., 50., 51., 52., 53., 54., 55., 56., 57., 58., 59.,\n",
              "       60., 61., 62., 63., 64., 65., 66., 67., 68., 69.])"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SZ-j28aPihZx"
      },
      "source": [
        "## Visualising the Test set results"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from matplotlib.colors import ListedColormap\n",
        "X_set, y_set = sc.inverse_transform(X_test), y_test\n",
        "X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min()-10, stop = X_set[:,0].max() + 10, step = 0.25),\n",
        "                     np.arange(start = X_set[:, 1].min()-1000, stop = X_set[:,1].max() + 1000, step = 0.25))\n",
        "plt.contour(X1, X2, logreg.predict(sc.transform(np.array([X1.ravel(), X2.ravel()]).T)).reshape(X1.shape),\n",
        "            alpha = 0.75,cmap = ListedColormap(('red','green')))\n",
        "plt.xlim(X1.min(), X1.max())\n",
        "plt.ylim(X2.min(), X2.max())\n",
        "for i,j in enumerate(np.unique(y_set)):\n",
        "  plt.scatter(X_set[y_set ==  j,0],X_set[y_set == j,1], c = ListedColormap(('red','green'))(i),label=j)\n",
        "plt.title('Logistic Regression (training set)')\n",
        "plt.xlabel('Age')\n",
        "plt.ylabel('Estimated Salary')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 352
        },
        "id": "_Nlrs1Tc8H9E",
        "outputId": "1ae03cf2-d171-4e3b-bee0-92dcda716fea"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:matplotlib.axes._axes:*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n",
            "WARNING:matplotlib.axes._axes:*c* argument looks like a single numeric RGB or RGBA sequence, which should be avoided as value-mapping will have precedence in case its length matches with *x* & *y*.  Please use the *color* keyword-argument or provide a 2-D array with a single row if you intend to specify the same RGB or RGBA value for all points.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "kkAIX8nK8O8a"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}